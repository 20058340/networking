name: Docker Deploy Pipeline

on:
  push:
    branches:
      - main  # Triggers on push to 'main' branch

jobs:
  docker-deploy:
    name: Part 3 - Build & Deploy Docker Container
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: barath0023/sample-app:latest

  ci-cd-pipeline:
    name: Part 4 - CI/CD Pipeline for AWS Deployment
    runs-on: ubuntu-latest
    needs: docker-deploy

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Create SSH key file for EC2 instance connection
      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > /tmp/ec2key.pem
          chmod 400 /tmp/ec2key.pem

      # Step 3: SSH into EC2, Install Docker if Needed, and Deploy Container
      - name: SSH into EC2 and Deploy Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2key.pem ec2-user@63.35.220.240 << 'EOF'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo yum install -y docker
              sudo systemctl enable --now docker
            fi

            # Stop any process currently using port 80 (to ensure no conflict)
            sudo fuser -k 80/tcp || true

            # Check if a container named 'sample-app' already exists
            if docker ps -a --format '{{.Names}}' | grep -q '^sample-app$'; then
              echo "Stopping and removing the existing 'sample-app' container..."
              docker stop sample-app || true
              docker rm sample-app || true
            fi

            # Pull the latest Docker image
            echo "Pulling Docker image..."
            docker pull barath0023/sample-app:latest

            # Check if port 80 is free and use it, otherwise fallback to port 8080
            if sudo lsof -i :80; then
              echo "Port 80 is in use, using port 8080..."
              docker run -d --name sample-app -p 8080:80 barath0023/sample-app:latest
            else
              echo "Port 80 is free, using port 80..."
              docker run -d --name sample-app -p 80:80 barath0023/sample-app:latest
            fi
          EOF
